// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/delivery/graph/generated.go
//
// Generated by this command:
//
//	mockgen -source=./internal/delivery/graph/generated.go -destination=test/mock/delivery/graph/generated_mock.go
//

// Package mock_graph is a generated GoMock package.
package mock_graph

import (
	context "context"
	reflect "reflect"
	time "time"

	graph "github.com/TrinityKnights/Backend/internal/delivery/graph"
	graphmodel "github.com/TrinityKnights/Backend/internal/delivery/graph/model"
	model "github.com/TrinityKnights/Backend/internal/domain/model"
	gomock "go.uber.org/mock/gomock"
)

// MockResolverRoot is a mock of ResolverRoot interface.
type MockResolverRoot struct {
	ctrl     *gomock.Controller
	recorder *MockResolverRootMockRecorder
	isgomock struct{}
}

// MockResolverRootMockRecorder is the mock recorder for MockResolverRoot.
type MockResolverRootMockRecorder struct {
	mock *MockResolverRoot
}

// NewMockResolverRoot creates a new mock instance.
func NewMockResolverRoot(ctrl *gomock.Controller) *MockResolverRoot {
	mock := &MockResolverRoot{ctrl: ctrl}
	mock.recorder = &MockResolverRootMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResolverRoot) EXPECT() *MockResolverRootMockRecorder {
	return m.recorder
}

// EventResponse mocks base method.
func (m *MockResolverRoot) EventResponse() graph.EventResponseResolver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventResponse")
	ret0, _ := ret[0].(graph.EventResponseResolver)
	return ret0
}

// EventResponse indicates an expected call of EventResponse.
func (mr *MockResolverRootMockRecorder) EventResponse() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventResponse", reflect.TypeOf((*MockResolverRoot)(nil).EventResponse))
}

// Mutation mocks base method.
func (m *MockResolverRoot) Mutation() graph.MutationResolver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mutation")
	ret0, _ := ret[0].(graph.MutationResolver)
	return ret0
}

// Mutation indicates an expected call of Mutation.
func (mr *MockResolverRootMockRecorder) Mutation() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mutation", reflect.TypeOf((*MockResolverRoot)(nil).Mutation))
}

// Query mocks base method.
func (m *MockResolverRoot) Query() graph.QueryResolver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query")
	ret0, _ := ret[0].(graph.QueryResolver)
	return ret0
}

// Query indicates an expected call of Query.
func (mr *MockResolverRootMockRecorder) Query() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockResolverRoot)(nil).Query))
}

// UserResponse mocks base method.
func (m *MockResolverRoot) UserResponse() graph.UserResponseResolver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserResponse")
	ret0, _ := ret[0].(graph.UserResponseResolver)
	return ret0
}

// UserResponse indicates an expected call of UserResponse.
func (mr *MockResolverRootMockRecorder) UserResponse() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserResponse", reflect.TypeOf((*MockResolverRoot)(nil).UserResponse))
}

// VenueResponse mocks base method.
func (m *MockResolverRoot) VenueResponse() graph.VenueResponseResolver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VenueResponse")
	ret0, _ := ret[0].(graph.VenueResponseResolver)
	return ret0
}

// VenueResponse indicates an expected call of VenueResponse.
func (mr *MockResolverRootMockRecorder) VenueResponse() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VenueResponse", reflect.TypeOf((*MockResolverRoot)(nil).VenueResponse))
}

// MockEventResponseResolver is a mock of EventResponseResolver interface.
type MockEventResponseResolver struct {
	ctrl     *gomock.Controller
	recorder *MockEventResponseResolverMockRecorder
	isgomock struct{}
}

// MockEventResponseResolverMockRecorder is the mock recorder for MockEventResponseResolver.
type MockEventResponseResolverMockRecorder struct {
	mock *MockEventResponseResolver
}

// NewMockEventResponseResolver creates a new mock instance.
func NewMockEventResponseResolver(ctrl *gomock.Controller) *MockEventResponseResolver {
	mock := &MockEventResponseResolver{ctrl: ctrl}
	mock.recorder = &MockEventResponseResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventResponseResolver) EXPECT() *MockEventResponseResolverMockRecorder {
	return m.recorder
}

// ID mocks base method.
func (m *MockEventResponseResolver) ID(ctx context.Context, obj *model.EventResponse) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID", ctx, obj)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ID indicates an expected call of ID.
func (mr *MockEventResponseResolverMockRecorder) ID(ctx, obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockEventResponseResolver)(nil).ID), ctx, obj)
}

// Time mocks base method.
func (m *MockEventResponseResolver) Time(ctx context.Context, obj *model.EventResponse) (*time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Time", ctx, obj)
	ret0, _ := ret[0].(*time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Time indicates an expected call of Time.
func (mr *MockEventResponseResolverMockRecorder) Time(ctx, obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Time", reflect.TypeOf((*MockEventResponseResolver)(nil).Time), ctx, obj)
}

// Venue mocks base method.
func (m *MockEventResponseResolver) Venue(ctx context.Context, obj *model.EventResponse) (*model.VenueResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Venue", ctx, obj)
	ret0, _ := ret[0].(*model.VenueResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Venue indicates an expected call of Venue.
func (mr *MockEventResponseResolverMockRecorder) Venue(ctx, obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Venue", reflect.TypeOf((*MockEventResponseResolver)(nil).Venue), ctx, obj)
}

// VenueID mocks base method.
func (m *MockEventResponseResolver) VenueID(ctx context.Context, obj *model.EventResponse) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VenueID", ctx, obj)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VenueID indicates an expected call of VenueID.
func (mr *MockEventResponseResolverMockRecorder) VenueID(ctx, obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VenueID", reflect.TypeOf((*MockEventResponseResolver)(nil).VenueID), ctx, obj)
}

// MockMutationResolver is a mock of MutationResolver interface.
type MockMutationResolver struct {
	ctrl     *gomock.Controller
	recorder *MockMutationResolverMockRecorder
	isgomock struct{}
}

// MockMutationResolverMockRecorder is the mock recorder for MockMutationResolver.
type MockMutationResolverMockRecorder struct {
	mock *MockMutationResolver
}

// NewMockMutationResolver creates a new mock instance.
func NewMockMutationResolver(ctrl *gomock.Controller) *MockMutationResolver {
	mock := &MockMutationResolver{ctrl: ctrl}
	mock.recorder = &MockMutationResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMutationResolver) EXPECT() *MockMutationResolverMockRecorder {
	return m.recorder
}

// CreateEvent mocks base method.
func (m *MockMutationResolver) CreateEvent(ctx context.Context, name, description, date, time string, venueID int) (*model.EventResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvent", ctx, name, description, date, time, venueID)
	ret0, _ := ret[0].(*model.EventResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEvent indicates an expected call of CreateEvent.
func (mr *MockMutationResolverMockRecorder) CreateEvent(ctx, name, description, date, time, venueID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvent", reflect.TypeOf((*MockMutationResolver)(nil).CreateEvent), ctx, name, description, date, time, venueID)
}

// CreateTicket mocks base method.
func (m *MockMutationResolver) CreateTicket(ctx context.Context, input graphmodel.CreateTicketInput) ([]*graphmodel.TicketResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTicket", ctx, input)
	ret0, _ := ret[0].([]*graphmodel.TicketResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTicket indicates an expected call of CreateTicket.
func (mr *MockMutationResolverMockRecorder) CreateTicket(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTicket", reflect.TypeOf((*MockMutationResolver)(nil).CreateTicket), ctx, input)
}

// CreateVenue mocks base method.
func (m *MockMutationResolver) CreateVenue(ctx context.Context, name, address string, capacity int, city, state, zip string) (*model.VenueResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVenue", ctx, name, address, capacity, city, state, zip)
	ret0, _ := ret[0].(*model.VenueResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVenue indicates an expected call of CreateVenue.
func (mr *MockMutationResolverMockRecorder) CreateVenue(ctx, name, address, capacity, city, state, zip any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVenue", reflect.TypeOf((*MockMutationResolver)(nil).CreateVenue), ctx, name, address, capacity, city, state, zip)
}

// UpdateEvent mocks base method.
func (m *MockMutationResolver) UpdateEvent(ctx context.Context, id int, input graphmodel.UpdateEventInput) (*model.EventResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEvent", ctx, id, input)
	ret0, _ := ret[0].(*model.EventResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEvent indicates an expected call of UpdateEvent.
func (mr *MockMutationResolverMockRecorder) UpdateEvent(ctx, id, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEvent", reflect.TypeOf((*MockMutationResolver)(nil).UpdateEvent), ctx, id, input)
}

// UpdateTicket mocks base method.
func (m *MockMutationResolver) UpdateTicket(ctx context.Context, id string, input graphmodel.UpdateTicketInput) (*graphmodel.TicketResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTicket", ctx, id, input)
	ret0, _ := ret[0].(*graphmodel.TicketResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTicket indicates an expected call of UpdateTicket.
func (mr *MockMutationResolverMockRecorder) UpdateTicket(ctx, id, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTicket", reflect.TypeOf((*MockMutationResolver)(nil).UpdateTicket), ctx, id, input)
}

// UpdateVenue mocks base method.
func (m *MockMutationResolver) UpdateVenue(ctx context.Context, id int, input graphmodel.UpdateVenueInput) (*model.VenueResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVenue", ctx, id, input)
	ret0, _ := ret[0].(*model.VenueResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVenue indicates an expected call of UpdateVenue.
func (mr *MockMutationResolverMockRecorder) UpdateVenue(ctx, id, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVenue", reflect.TypeOf((*MockMutationResolver)(nil).UpdateVenue), ctx, id, input)
}

// MockQueryResolver is a mock of QueryResolver interface.
type MockQueryResolver struct {
	ctrl     *gomock.Controller
	recorder *MockQueryResolverMockRecorder
	isgomock struct{}
}

// MockQueryResolverMockRecorder is the mock recorder for MockQueryResolver.
type MockQueryResolverMockRecorder struct {
	mock *MockQueryResolver
}

// NewMockQueryResolver creates a new mock instance.
func NewMockQueryResolver(ctrl *gomock.Controller) *MockQueryResolver {
	mock := &MockQueryResolver{ctrl: ctrl}
	mock.recorder = &MockQueryResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueryResolver) EXPECT() *MockQueryResolverMockRecorder {
	return m.recorder
}

// Event mocks base method.
func (m *MockQueryResolver) Event(ctx context.Context, id int) (*model.EventResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Event", ctx, id)
	ret0, _ := ret[0].(*model.EventResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Event indicates an expected call of Event.
func (mr *MockQueryResolverMockRecorder) Event(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Event", reflect.TypeOf((*MockQueryResolver)(nil).Event), ctx, id)
}

// Events mocks base method.
func (m *MockQueryResolver) Events(ctx context.Context, page, size *int, sort, order *string) (*graphmodel.EventsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Events", ctx, page, size, sort, order)
	ret0, _ := ret[0].(*graphmodel.EventsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Events indicates an expected call of Events.
func (mr *MockQueryResolverMockRecorder) Events(ctx, page, size, sort, order any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Events", reflect.TypeOf((*MockQueryResolver)(nil).Events), ctx, page, size, sort, order)
}

// Payment mocks base method.
func (m *MockQueryResolver) Payment(ctx context.Context, id int) (*graphmodel.PaymentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Payment", ctx, id)
	ret0, _ := ret[0].(*graphmodel.PaymentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Payment indicates an expected call of Payment.
func (mr *MockQueryResolverMockRecorder) Payment(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Payment", reflect.TypeOf((*MockQueryResolver)(nil).Payment), ctx, id)
}

// Payments mocks base method.
func (m *MockQueryResolver) Payments(ctx context.Context, page, size *int, sort, order *string) (*graphmodel.PaymentsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Payments", ctx, page, size, sort, order)
	ret0, _ := ret[0].(*graphmodel.PaymentsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Payments indicates an expected call of Payments.
func (mr *MockQueryResolverMockRecorder) Payments(ctx, page, size, sort, order any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Payments", reflect.TypeOf((*MockQueryResolver)(nil).Payments), ctx, page, size, sort, order)
}

// Profile mocks base method.
func (m *MockQueryResolver) Profile(ctx context.Context) (*model.UserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Profile", ctx)
	ret0, _ := ret[0].(*model.UserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Profile indicates an expected call of Profile.
func (mr *MockQueryResolverMockRecorder) Profile(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Profile", reflect.TypeOf((*MockQueryResolver)(nil).Profile), ctx)
}

// SearchEvents mocks base method.
func (m *MockQueryResolver) SearchEvents(ctx context.Context, name, description, date, time *string, venueID, page, size *int, sort, order *string) (*graphmodel.EventsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchEvents", ctx, name, description, date, time, venueID, page, size, sort, order)
	ret0, _ := ret[0].(*graphmodel.EventsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchEvents indicates an expected call of SearchEvents.
func (mr *MockQueryResolverMockRecorder) SearchEvents(ctx, name, description, date, time, venueID, page, size, sort, order any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchEvents", reflect.TypeOf((*MockQueryResolver)(nil).SearchEvents), ctx, name, description, date, time, venueID, page, size, sort, order)
}

// SearchPayments mocks base method.
func (m *MockQueryResolver) SearchPayments(ctx context.Context, id, orderID *int, amount *float64, status *string, page, size *int, sort, order *string) (*graphmodel.PaymentsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchPayments", ctx, id, orderID, amount, status, page, size, sort, order)
	ret0, _ := ret[0].(*graphmodel.PaymentsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchPayments indicates an expected call of SearchPayments.
func (mr *MockQueryResolverMockRecorder) SearchPayments(ctx, id, orderID, amount, status, page, size, sort, order any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchPayments", reflect.TypeOf((*MockQueryResolver)(nil).SearchPayments), ctx, id, orderID, amount, status, page, size, sort, order)
}

// SearchTickets mocks base method.
func (m *MockQueryResolver) SearchTickets(ctx context.Context, id *string, eventID, orderID *int, price *float64, typeArg, seatNumber *string, page, size *int, sort, order *string) (*graphmodel.TicketsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchTickets", ctx, id, eventID, orderID, price, typeArg, seatNumber, page, size, sort, order)
	ret0, _ := ret[0].(*graphmodel.TicketsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchTickets indicates an expected call of SearchTickets.
func (mr *MockQueryResolverMockRecorder) SearchTickets(ctx, id, eventID, orderID, price, typeArg, seatNumber, page, size, sort, order any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchTickets", reflect.TypeOf((*MockQueryResolver)(nil).SearchTickets), ctx, id, eventID, orderID, price, typeArg, seatNumber, page, size, sort, order)
}

// SearchVenues mocks base method.
func (m *MockQueryResolver) SearchVenues(ctx context.Context, name, address *string, capacity *int, city, state, zip *string, page, size *int, sort, order *string) (*graphmodel.VenuesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchVenues", ctx, name, address, capacity, city, state, zip, page, size, sort, order)
	ret0, _ := ret[0].(*graphmodel.VenuesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchVenues indicates an expected call of SearchVenues.
func (mr *MockQueryResolverMockRecorder) SearchVenues(ctx, name, address, capacity, city, state, zip, page, size, sort, order any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchVenues", reflect.TypeOf((*MockQueryResolver)(nil).SearchVenues), ctx, name, address, capacity, city, state, zip, page, size, sort, order)
}

// Ticket mocks base method.
func (m *MockQueryResolver) Ticket(ctx context.Context, id string) (*graphmodel.TicketResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ticket", ctx, id)
	ret0, _ := ret[0].(*graphmodel.TicketResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ticket indicates an expected call of Ticket.
func (mr *MockQueryResolverMockRecorder) Ticket(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ticket", reflect.TypeOf((*MockQueryResolver)(nil).Ticket), ctx, id)
}

// Tickets mocks base method.
func (m *MockQueryResolver) Tickets(ctx context.Context, page, size *int, sort, order *string) (*graphmodel.TicketsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tickets", ctx, page, size, sort, order)
	ret0, _ := ret[0].(*graphmodel.TicketsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Tickets indicates an expected call of Tickets.
func (mr *MockQueryResolverMockRecorder) Tickets(ctx, page, size, sort, order any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tickets", reflect.TypeOf((*MockQueryResolver)(nil).Tickets), ctx, page, size, sort, order)
}

// Venue mocks base method.
func (m *MockQueryResolver) Venue(ctx context.Context, id int) (*model.VenueResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Venue", ctx, id)
	ret0, _ := ret[0].(*model.VenueResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Venue indicates an expected call of Venue.
func (mr *MockQueryResolverMockRecorder) Venue(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Venue", reflect.TypeOf((*MockQueryResolver)(nil).Venue), ctx, id)
}

// Venues mocks base method.
func (m *MockQueryResolver) Venues(ctx context.Context, page, size *int, sort, order *string) (*graphmodel.VenuesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Venues", ctx, page, size, sort, order)
	ret0, _ := ret[0].(*graphmodel.VenuesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Venues indicates an expected call of Venues.
func (mr *MockQueryResolverMockRecorder) Venues(ctx, page, size, sort, order any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Venues", reflect.TypeOf((*MockQueryResolver)(nil).Venues), ctx, page, size, sort, order)
}

// MockUserResponseResolver is a mock of UserResponseResolver interface.
type MockUserResponseResolver struct {
	ctrl     *gomock.Controller
	recorder *MockUserResponseResolverMockRecorder
	isgomock struct{}
}

// MockUserResponseResolverMockRecorder is the mock recorder for MockUserResponseResolver.
type MockUserResponseResolverMockRecorder struct {
	mock *MockUserResponseResolver
}

// NewMockUserResponseResolver creates a new mock instance.
func NewMockUserResponseResolver(ctrl *gomock.Controller) *MockUserResponseResolver {
	mock := &MockUserResponseResolver{ctrl: ctrl}
	mock.recorder = &MockUserResponseResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserResponseResolver) EXPECT() *MockUserResponseResolverMockRecorder {
	return m.recorder
}

// CreatedAt mocks base method.
func (m *MockUserResponseResolver) CreatedAt(ctx context.Context, obj *model.UserResponse) (*time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatedAt", ctx, obj)
	ret0, _ := ret[0].(*time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatedAt indicates an expected call of CreatedAt.
func (mr *MockUserResponseResolverMockRecorder) CreatedAt(ctx, obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatedAt", reflect.TypeOf((*MockUserResponseResolver)(nil).CreatedAt), ctx, obj)
}

// UpdatedAt mocks base method.
func (m *MockUserResponseResolver) UpdatedAt(ctx context.Context, obj *model.UserResponse) (*time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatedAt", ctx, obj)
	ret0, _ := ret[0].(*time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatedAt indicates an expected call of UpdatedAt.
func (mr *MockUserResponseResolverMockRecorder) UpdatedAt(ctx, obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatedAt", reflect.TypeOf((*MockUserResponseResolver)(nil).UpdatedAt), ctx, obj)
}

// MockVenueResponseResolver is a mock of VenueResponseResolver interface.
type MockVenueResponseResolver struct {
	ctrl     *gomock.Controller
	recorder *MockVenueResponseResolverMockRecorder
	isgomock struct{}
}

// MockVenueResponseResolverMockRecorder is the mock recorder for MockVenueResponseResolver.
type MockVenueResponseResolverMockRecorder struct {
	mock *MockVenueResponseResolver
}

// NewMockVenueResponseResolver creates a new mock instance.
func NewMockVenueResponseResolver(ctrl *gomock.Controller) *MockVenueResponseResolver {
	mock := &MockVenueResponseResolver{ctrl: ctrl}
	mock.recorder = &MockVenueResponseResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVenueResponseResolver) EXPECT() *MockVenueResponseResolverMockRecorder {
	return m.recorder
}

// ID mocks base method.
func (m *MockVenueResponseResolver) ID(ctx context.Context, obj *model.VenueResponse) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID", ctx, obj)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ID indicates an expected call of ID.
func (mr *MockVenueResponseResolverMockRecorder) ID(ctx, obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockVenueResponseResolver)(nil).ID), ctx, obj)
}
