// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/delivery/http/handler/payment/payment_handler.go

// Package mock_payment is a generated GoMock package.
package mock_payment

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v4 "github.com/labstack/echo/v4"
)

// MockPaymentHandler is a mock of PaymentHandler interface.
type MockPaymentHandler struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentHandlerMockRecorder
}

// MockPaymentHandlerMockRecorder is the mock recorder for MockPaymentHandler.
type MockPaymentHandlerMockRecorder struct {
	mock *MockPaymentHandler
}

// NewMockPaymentHandler creates a new mock instance.
func NewMockPaymentHandler(ctrl *gomock.Controller) *MockPaymentHandler {
	mock := &MockPaymentHandler{ctrl: ctrl}
	mock.recorder = &MockPaymentHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaymentHandler) EXPECT() *MockPaymentHandlerMockRecorder {
	return m.recorder
}

// CreatePayment mocks base method.
func (m *MockPaymentHandler) CreatePayment(ctx v4.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePayment", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePayment indicates an expected call of CreatePayment.
func (mr *MockPaymentHandlerMockRecorder) CreatePayment(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePayment", reflect.TypeOf((*MockPaymentHandler)(nil).CreatePayment), ctx)
}

// HandleCallback mocks base method.
func (m *MockPaymentHandler) HandleCallback(ctx v4.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleCallback", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleCallback indicates an expected call of HandleCallback.
func (mr *MockPaymentHandlerMockRecorder) HandleCallback(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleCallback", reflect.TypeOf((*MockPaymentHandler)(nil).HandleCallback), ctx)
}
