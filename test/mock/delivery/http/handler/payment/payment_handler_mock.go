// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/delivery/http/handler/payment/payment_handler.go
//
// Generated by this command:
//
//	mockgen -source=./internal/delivery/http/handler/payment/payment_handler.go -destination=test/mock/delivery/http/handler/payment/payment_handler_mock.go
//

// Package mock_payment is a generated GoMock package.
package mock_payment

import (
	reflect "reflect"

	echo "github.com/labstack/echo/v4"
	gomock "go.uber.org/mock/gomock"
)

// MockPaymentHandler is a mock of PaymentHandler interface.
type MockPaymentHandler struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentHandlerMockRecorder
	isgomock struct{}
}

// MockPaymentHandlerMockRecorder is the mock recorder for MockPaymentHandler.
type MockPaymentHandlerMockRecorder struct {
	mock *MockPaymentHandler
}

// NewMockPaymentHandler creates a new mock instance.
func NewMockPaymentHandler(ctrl *gomock.Controller) *MockPaymentHandler {
	mock := &MockPaymentHandler{ctrl: ctrl}
	mock.recorder = &MockPaymentHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaymentHandler) EXPECT() *MockPaymentHandlerMockRecorder {
	return m.recorder
}

// CallbackPayment mocks base method.
func (m *MockPaymentHandler) CallbackPayment(ctx echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallbackPayment", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallbackPayment indicates an expected call of CallbackPayment.
func (mr *MockPaymentHandlerMockRecorder) CallbackPayment(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallbackPayment", reflect.TypeOf((*MockPaymentHandler)(nil).CallbackPayment), ctx)
}

// GetPaymentByID mocks base method.
func (m *MockPaymentHandler) GetPaymentByID(ctx echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentByID", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetPaymentByID indicates an expected call of GetPaymentByID.
func (mr *MockPaymentHandlerMockRecorder) GetPaymentByID(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentByID", reflect.TypeOf((*MockPaymentHandler)(nil).GetPaymentByID), ctx)
}

// GetPayments mocks base method.
func (m *MockPaymentHandler) GetPayments(ctx echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPayments", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetPayments indicates an expected call of GetPayments.
func (mr *MockPaymentHandlerMockRecorder) GetPayments(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPayments", reflect.TypeOf((*MockPaymentHandler)(nil).GetPayments), ctx)
}

// SearchPayments mocks base method.
func (m *MockPaymentHandler) SearchPayments(ctx echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchPayments", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchPayments indicates an expected call of SearchPayments.
func (mr *MockPaymentHandlerMockRecorder) SearchPayments(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchPayments", reflect.TypeOf((*MockPaymentHandler)(nil).SearchPayments), ctx)
}
