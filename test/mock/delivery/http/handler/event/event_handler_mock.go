// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/delivery/http/handler/event/event_handler.go
//
// Generated by this command:
//
//	mockgen -source=./internal/delivery/http/handler/event/event_handler.go -destination=test/mock/delivery/http/handler/event/event_handler_mock.go
//

// Package mock_event is a generated GoMock package.
package mock_event

import (
	reflect "reflect"

	echo "github.com/labstack/echo/v4"
	gomock "go.uber.org/mock/gomock"
)

// MockEventHandler is a mock of EventHandler interface.
type MockEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockEventHandlerMockRecorder
	isgomock struct{}
}

// MockEventHandlerMockRecorder is the mock recorder for MockEventHandler.
type MockEventHandlerMockRecorder struct {
	mock *MockEventHandler
}

// NewMockEventHandler creates a new mock instance.
func NewMockEventHandler(ctrl *gomock.Controller) *MockEventHandler {
	mock := &MockEventHandler{ctrl: ctrl}
	mock.recorder = &MockEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventHandler) EXPECT() *MockEventHandlerMockRecorder {
	return m.recorder
}

// CreateEvent mocks base method.
func (m *MockEventHandler) CreateEvent(ctx echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvent", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEvent indicates an expected call of CreateEvent.
func (mr *MockEventHandlerMockRecorder) CreateEvent(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvent", reflect.TypeOf((*MockEventHandler)(nil).CreateEvent), ctx)
}

// GetAllEvents mocks base method.
func (m *MockEventHandler) GetAllEvents(ctx echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllEvents", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetAllEvents indicates an expected call of GetAllEvents.
func (mr *MockEventHandlerMockRecorder) GetAllEvents(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllEvents", reflect.TypeOf((*MockEventHandler)(nil).GetAllEvents), ctx)
}

// GetEventByID mocks base method.
func (m *MockEventHandler) GetEventByID(ctx echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventByID", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetEventByID indicates an expected call of GetEventByID.
func (mr *MockEventHandlerMockRecorder) GetEventByID(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventByID", reflect.TypeOf((*MockEventHandler)(nil).GetEventByID), ctx)
}

// SearchEvents mocks base method.
func (m *MockEventHandler) SearchEvents(ctx echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchEvents", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchEvents indicates an expected call of SearchEvents.
func (mr *MockEventHandlerMockRecorder) SearchEvents(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchEvents", reflect.TypeOf((*MockEventHandler)(nil).SearchEvents), ctx)
}

// UpdateEvent mocks base method.
func (m *MockEventHandler) UpdateEvent(ctx echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEvent", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEvent indicates an expected call of UpdateEvent.
func (mr *MockEventHandlerMockRecorder) UpdateEvent(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEvent", reflect.TypeOf((*MockEventHandler)(nil).UpdateEvent), ctx)
}
