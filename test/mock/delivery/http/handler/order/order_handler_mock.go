// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/delivery/http/handler/order/order_handler.go
//
// Generated by this command:
//
//	mockgen -source=./internal/delivery/http/handler/order/order_handler.go -destination=test/mock/delivery/http/handler/order/order_handler_mock.go
//

// Package mock_order is a generated GoMock package.
package mock_order

import (
	reflect "reflect"

	echo "github.com/labstack/echo/v4"
	gomock "go.uber.org/mock/gomock"
)

// MockOrderHandler is a mock of OrderHandler interface.
type MockOrderHandler struct {
	ctrl     *gomock.Controller
	recorder *MockOrderHandlerMockRecorder
	isgomock struct{}
}

// MockOrderHandlerMockRecorder is the mock recorder for MockOrderHandler.
type MockOrderHandlerMockRecorder struct {
	mock *MockOrderHandler
}

// NewMockOrderHandler creates a new mock instance.
func NewMockOrderHandler(ctrl *gomock.Controller) *MockOrderHandler {
	mock := &MockOrderHandler{ctrl: ctrl}
	mock.recorder = &MockOrderHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderHandler) EXPECT() *MockOrderHandlerMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockOrderHandler) CreateOrder(ctx echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockOrderHandlerMockRecorder) CreateOrder(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockOrderHandler)(nil).CreateOrder), ctx)
}

// GetAllOrders mocks base method.
func (m *MockOrderHandler) GetAllOrders(ctx echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllOrders", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetAllOrders indicates an expected call of GetAllOrders.
func (mr *MockOrderHandlerMockRecorder) GetAllOrders(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllOrders", reflect.TypeOf((*MockOrderHandler)(nil).GetAllOrders), ctx)
}

// GetOrderByID mocks base method.
func (m *MockOrderHandler) GetOrderByID(ctx echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByID", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetOrderByID indicates an expected call of GetOrderByID.
func (mr *MockOrderHandlerMockRecorder) GetOrderByID(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByID", reflect.TypeOf((*MockOrderHandler)(nil).GetOrderByID), ctx)
}
