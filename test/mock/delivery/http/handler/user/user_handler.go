// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/delivery/http/handler/user/user_handler.go

// Package mock_user is a generated GoMock package.
package mock_user

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v4 "github.com/labstack/echo/v4"
)

// MockUserHandler is a mock of UserHandler interface.
type MockUserHandler struct {
	ctrl     *gomock.Controller
	recorder *MockUserHandlerMockRecorder
}

// MockUserHandlerMockRecorder is the mock recorder for MockUserHandler.
type MockUserHandlerMockRecorder struct {
	mock *MockUserHandler
}

// NewMockUserHandler creates a new mock instance.
func NewMockUserHandler(ctrl *gomock.Controller) *MockUserHandler {
	mock := &MockUserHandler{ctrl: ctrl}
	mock.recorder = &MockUserHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserHandler) EXPECT() *MockUserHandlerMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockUserHandler) Login(ctx v4.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Login indicates an expected call of Login.
func (mr *MockUserHandlerMockRecorder) Login(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserHandler)(nil).Login), ctx)
}

// Profile mocks base method.
func (m *MockUserHandler) Profile(ctx v4.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Profile", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Profile indicates an expected call of Profile.
func (mr *MockUserHandlerMockRecorder) Profile(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Profile", reflect.TypeOf((*MockUserHandler)(nil).Profile), ctx)
}

// RefreshToken mocks base method.
func (m *MockUserHandler) RefreshToken(ctx v4.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshToken", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// RefreshToken indicates an expected call of RefreshToken.
func (mr *MockUserHandlerMockRecorder) RefreshToken(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshToken", reflect.TypeOf((*MockUserHandler)(nil).RefreshToken), ctx)
}

// Register mocks base method.
func (m *MockUserHandler) Register(ctx v4.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockUserHandlerMockRecorder) Register(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockUserHandler)(nil).Register), ctx)
}

// Update mocks base method.
func (m *MockUserHandler) Update(ctx v4.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUserHandlerMockRecorder) Update(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserHandler)(nil).Update), ctx)
}
