// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/order/order_repository.go
//
// Generated by this command:
//
//	mockgen -source=./internal/repository/order/order_repository.go -destination=test/mock/repository/order/order_repository_mock.go
//

// Package mock_order is a generated GoMock package.
package mock_order

import (
	reflect "reflect"

	entity "github.com/TrinityKnights/Backend/internal/domain/entity"
	gomock "go.uber.org/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockOrderRepository is a mock of OrderRepository interface.
type MockOrderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOrderRepositoryMockRecorder
	isgomock struct{}
}

// MockOrderRepositoryMockRecorder is the mock recorder for MockOrderRepository.
type MockOrderRepositoryMockRecorder struct {
	mock *MockOrderRepository
}

// NewMockOrderRepository creates a new mock instance.
func NewMockOrderRepository(ctrl *gomock.Controller) *MockOrderRepository {
	mock := &MockOrderRepository{ctrl: ctrl}
	mock.recorder = &MockOrderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderRepository) EXPECT() *MockOrderRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockOrderRepository) Create(db *gorm.DB, entity *entity.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", db, entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockOrderRepositoryMockRecorder) Create(db, entity any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOrderRepository)(nil).Create), db, entity)
}

// Delete mocks base method.
func (m *MockOrderRepository) Delete(db *gorm.DB, entity *entity.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", db, entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockOrderRepositoryMockRecorder) Delete(db, entity any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockOrderRepository)(nil).Delete), db, entity)
}

// GetAllWithDetails mocks base method.
func (m *MockOrderRepository) GetAllWithDetails(db *gorm.DB, orders *[]entity.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllWithDetails", db, orders)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetAllWithDetails indicates an expected call of GetAllWithDetails.
func (mr *MockOrderRepositoryMockRecorder) GetAllWithDetails(db, orders any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllWithDetails", reflect.TypeOf((*MockOrderRepository)(nil).GetAllWithDetails), db, orders)
}

// GetByID mocks base method.
func (m *MockOrderRepository) GetByID(db *gorm.DB, order *entity.Order, id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", db, order, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetByID indicates an expected call of GetByID.
func (mr *MockOrderRepositoryMockRecorder) GetByID(db, order, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockOrderRepository)(nil).GetByID), db, order, id)
}

// GetByIDWithDetails mocks base method.
func (m *MockOrderRepository) GetByIDWithDetails(db *gorm.DB, order *entity.Order, id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIDWithDetails", db, order, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetByIDWithDetails indicates an expected call of GetByIDWithDetails.
func (mr *MockOrderRepositoryMockRecorder) GetByIDWithDetails(db, order, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDWithDetails", reflect.TypeOf((*MockOrderRepository)(nil).GetByIDWithDetails), db, order, id)
}

// GetPaginatedOrders mocks base method.
func (m *MockOrderRepository) GetPaginatedOrders(db *gorm.DB, orders *[]entity.Order, page, size int, sort, order string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaginatedOrders", db, orders, page, size, sort, order)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaginatedOrders indicates an expected call of GetPaginatedOrders.
func (mr *MockOrderRepositoryMockRecorder) GetPaginatedOrders(db, orders, page, size, sort, order any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaginatedOrders", reflect.TypeOf((*MockOrderRepository)(nil).GetPaginatedOrders), db, orders, page, size, sort, order)
}

// Update mocks base method.
func (m *MockOrderRepository) Update(db *gorm.DB, entity *entity.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", db, entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockOrderRepositoryMockRecorder) Update(db, entity any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockOrderRepository)(nil).Update), db, entity)
}
