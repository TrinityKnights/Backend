// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/payment/payment_repository.go
//
// Generated by this command:
//
//	mockgen -source=./internal/repository/payment/payment_repository.go -destination=test/mock/repository/payment/payment_repository_mock.go
//

// Package mock_payment is a generated GoMock package.
package mock_payment

import (
	context "context"
	reflect "reflect"

	entity "github.com/TrinityKnights/Backend/internal/domain/entity"
	model "github.com/TrinityKnights/Backend/internal/domain/model"
	gomock "go.uber.org/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockPaymentRepository is a mock of PaymentRepository interface.
type MockPaymentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentRepositoryMockRecorder
	isgomock struct{}
}

// MockPaymentRepositoryMockRecorder is the mock recorder for MockPaymentRepository.
type MockPaymentRepositoryMockRecorder struct {
	mock *MockPaymentRepository
}

// NewMockPaymentRepository creates a new mock instance.
func NewMockPaymentRepository(ctrl *gomock.Controller) *MockPaymentRepository {
	mock := &MockPaymentRepository{ctrl: ctrl}
	mock.recorder = &MockPaymentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaymentRepository) EXPECT() *MockPaymentRepositoryMockRecorder {
	return m.recorder
}

// Find mocks base method.
func (m *MockPaymentRepository) Find(db *gorm.DB, filter *model.PaymentQueryOptions) ([]*entity.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", db, filter)
	ret0, _ := ret[0].([]*entity.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockPaymentRepositoryMockRecorder) Find(db, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockPaymentRepository)(nil).Find), db, filter)
}

// GetByTransactionID mocks base method.
func (m *MockPaymentRepository) GetByTransactionID(ctx context.Context, transactionID string) (*entity.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByTransactionID", ctx, transactionID)
	ret0, _ := ret[0].(*entity.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByTransactionID indicates an expected call of GetByTransactionID.
func (mr *MockPaymentRepositoryMockRecorder) GetByTransactionID(ctx, transactionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByTransactionID", reflect.TypeOf((*MockPaymentRepository)(nil).GetByTransactionID), ctx, transactionID)
}

// UpdatePaymentStatus mocks base method.
func (m *MockPaymentRepository) UpdatePaymentStatus(ctx context.Context, payment *model.PaymentUpdateRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePaymentStatus", ctx, payment)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePaymentStatus indicates an expected call of UpdatePaymentStatus.
func (mr *MockPaymentRepositoryMockRecorder) UpdatePaymentStatus(ctx, payment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePaymentStatus", reflect.TypeOf((*MockPaymentRepository)(nil).UpdatePaymentStatus), ctx, payment)
}
