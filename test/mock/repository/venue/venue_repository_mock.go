// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/venue/venue_repository.go
//
// Generated by this command:
//
//	mockgen -source=./internal/repository/venue/venue_repository.go -destination=test/mock/repository/venue/venue_repository_mock.go
//

// Package mock_venue is a generated GoMock package.
package mock_venue

import (
	reflect "reflect"

	entity "github.com/TrinityKnights/Backend/internal/domain/entity"
	model "github.com/TrinityKnights/Backend/internal/domain/model"
	gomock "go.uber.org/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockVenueRepository is a mock of VenueRepository interface.
type MockVenueRepository struct {
	ctrl     *gomock.Controller
	recorder *MockVenueRepositoryMockRecorder
	isgomock struct{}
}

// MockVenueRepositoryMockRecorder is the mock recorder for MockVenueRepository.
type MockVenueRepositoryMockRecorder struct {
	mock *MockVenueRepository
}

// NewMockVenueRepository creates a new mock instance.
func NewMockVenueRepository(ctrl *gomock.Controller) *MockVenueRepository {
	mock := &MockVenueRepository{ctrl: ctrl}
	mock.recorder = &MockVenueRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVenueRepository) EXPECT() *MockVenueRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockVenueRepository) Create(db *gorm.DB, entity *entity.Venue) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", db, entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockVenueRepositoryMockRecorder) Create(db, entity any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockVenueRepository)(nil).Create), db, entity)
}

// Delete mocks base method.
func (m *MockVenueRepository) Delete(db *gorm.DB, entity *entity.Venue) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", db, entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockVenueRepositoryMockRecorder) Delete(db, entity any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockVenueRepository)(nil).Delete), db, entity)
}

// GetByID mocks base method.
func (m *MockVenueRepository) GetByID(db *gorm.DB, venue *entity.Venue, id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", db, venue, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetByID indicates an expected call of GetByID.
func (mr *MockVenueRepositoryMockRecorder) GetByID(db, venue, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockVenueRepository)(nil).GetByID), db, venue, id)
}

// GetPaginated mocks base method.
func (m *MockVenueRepository) GetPaginated(db *gorm.DB, venues *[]entity.Venue, opts *model.VenueQueryOptions) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaginated", db, venues, opts)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaginated indicates an expected call of GetPaginated.
func (mr *MockVenueRepositoryMockRecorder) GetPaginated(db, venues, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaginated", reflect.TypeOf((*MockVenueRepository)(nil).GetPaginated), db, venues, opts)
}

// Update mocks base method.
func (m *MockVenueRepository) Update(db *gorm.DB, entity *entity.Venue) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", db, entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockVenueRepositoryMockRecorder) Update(db, entity any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockVenueRepository)(nil).Update), db, entity)
}
