// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/user/user_repository.go
//
// Generated by this command:
//
//	mockgen -source=./internal/repository/user/user_repository.go -destination=test/mock/repository/user/user_repository_mock.go
//

// Package mock_user is a generated GoMock package.
package mock_user

import (
	reflect "reflect"

	entity "github.com/TrinityKnights/Backend/internal/domain/entity"
	gomock "go.uber.org/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
	isgomock struct{}
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// CountByRole mocks base method.
func (m *MockUserRepository) CountByRole(db *gorm.DB, role string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountByRole", db, role)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountByRole indicates an expected call of CountByRole.
func (mr *MockUserRepositoryMockRecorder) CountByRole(db, role any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountByRole", reflect.TypeOf((*MockUserRepository)(nil).CountByRole), db, role)
}

// Create mocks base method.
func (m *MockUserRepository) Create(db *gorm.DB, entity *entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", db, entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUserRepositoryMockRecorder) Create(db, entity any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserRepository)(nil).Create), db, entity)
}

// Delete mocks base method.
func (m *MockUserRepository) Delete(db *gorm.DB, entity *entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", db, entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUserRepositoryMockRecorder) Delete(db, entity any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserRepository)(nil).Delete), db, entity)
}

// GetByEmail mocks base method.
func (m *MockUserRepository) GetByEmail(db *gorm.DB, user *entity.User, email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEmail", db, user, email)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetByEmail indicates an expected call of GetByEmail.
func (mr *MockUserRepositoryMockRecorder) GetByEmail(db, user, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmail", reflect.TypeOf((*MockUserRepository)(nil).GetByEmail), db, user, email)
}

// GetByID mocks base method.
func (m *MockUserRepository) GetByID(db *gorm.DB, user *entity.User, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", db, user, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetByID indicates an expected call of GetByID.
func (mr *MockUserRepositoryMockRecorder) GetByID(db, user, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockUserRepository)(nil).GetByID), db, user, id)
}

// GetByResetPasswordToken mocks base method.
func (m *MockUserRepository) GetByResetPasswordToken(db *gorm.DB, user *entity.User, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByResetPasswordToken", db, user, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetByResetPasswordToken indicates an expected call of GetByResetPasswordToken.
func (mr *MockUserRepositoryMockRecorder) GetByResetPasswordToken(db, user, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByResetPasswordToken", reflect.TypeOf((*MockUserRepository)(nil).GetByResetPasswordToken), db, user, token)
}

// GetByVerifyEmailToken mocks base method.
func (m *MockUserRepository) GetByVerifyEmailToken(db *gorm.DB, user *entity.User, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByVerifyEmailToken", db, user, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetByVerifyEmailToken indicates an expected call of GetByVerifyEmailToken.
func (mr *MockUserRepositoryMockRecorder) GetByVerifyEmailToken(db, user, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByVerifyEmailToken", reflect.TypeOf((*MockUserRepository)(nil).GetByVerifyEmailToken), db, user, token)
}

// GetFirst mocks base method.
func (m *MockUserRepository) GetFirst(db *gorm.DB, user *entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirst", db, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetFirst indicates an expected call of GetFirst.
func (mr *MockUserRepositoryMockRecorder) GetFirst(db, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirst", reflect.TypeOf((*MockUserRepository)(nil).GetFirst), db, user)
}

// Update mocks base method.
func (m *MockUserRepository) Update(db *gorm.DB, entity *entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", db, entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUserRepositoryMockRecorder) Update(db, entity any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserRepository)(nil).Update), db, entity)
}
