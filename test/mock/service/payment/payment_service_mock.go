// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/service/payment/payment_service.go
//
// Generated by this command:
//
//	mockgen -source=./internal/service/payment/payment_service.go -destination=test/mock/service/payment/payment_service_mock.go
//

// Package mock_payment is a generated GoMock package.
package mock_payment

import (
	context "context"
	reflect "reflect"

	model "github.com/TrinityKnights/Backend/internal/domain/model"
	gomock "go.uber.org/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockPaymentService is a mock of PaymentService interface.
type MockPaymentService struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentServiceMockRecorder
	isgomock struct{}
}

// MockPaymentServiceMockRecorder is the mock recorder for MockPaymentService.
type MockPaymentServiceMockRecorder struct {
	mock *MockPaymentService
}

// NewMockPaymentService creates a new mock instance.
func NewMockPaymentService(ctrl *gomock.Controller) *MockPaymentService {
	mock := &MockPaymentService{ctrl: ctrl}
	mock.recorder = &MockPaymentServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaymentService) EXPECT() *MockPaymentServiceMockRecorder {
	return m.recorder
}

// Callback mocks base method.
func (m *MockPaymentService) Callback(ctx context.Context, request *model.PaymentCallbackRequest) (*model.PaymentCallbackResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Callback", ctx, request)
	ret0, _ := ret[0].(*model.PaymentCallbackResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Callback indicates an expected call of Callback.
func (mr *MockPaymentServiceMockRecorder) Callback(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Callback", reflect.TypeOf((*MockPaymentService)(nil).Callback), ctx, request)
}

// CreateInvoice mocks base method.
func (m *MockPaymentService) CreateInvoice(ctx context.Context, tx *gorm.DB, request *model.CreatePaymentRequest) (*model.CreatePaymentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInvoice", ctx, tx, request)
	ret0, _ := ret[0].(*model.CreatePaymentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInvoice indicates an expected call of CreateInvoice.
func (mr *MockPaymentServiceMockRecorder) CreateInvoice(ctx, tx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInvoice", reflect.TypeOf((*MockPaymentService)(nil).CreateInvoice), ctx, tx, request)
}

// GetPaymentByID mocks base method.
func (m *MockPaymentService) GetPaymentByID(ctx context.Context, request *model.GetPaymentRequest) (*model.PaymentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentByID", ctx, request)
	ret0, _ := ret[0].(*model.PaymentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentByID indicates an expected call of GetPaymentByID.
func (mr *MockPaymentServiceMockRecorder) GetPaymentByID(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentByID", reflect.TypeOf((*MockPaymentService)(nil).GetPaymentByID), ctx, request)
}

// GetPayments mocks base method.
func (m *MockPaymentService) GetPayments(ctx context.Context, request *model.PaymentsRequest) (*model.Response[[]*model.PaymentResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPayments", ctx, request)
	ret0, _ := ret[0].(*model.Response[[]*model.PaymentResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPayments indicates an expected call of GetPayments.
func (mr *MockPaymentServiceMockRecorder) GetPayments(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPayments", reflect.TypeOf((*MockPaymentService)(nil).GetPayments), ctx, request)
}

// SearchPayments mocks base method.
func (m *MockPaymentService) SearchPayments(ctx context.Context, request *model.PaymentSearchRequest) (*model.Response[[]*model.PaymentResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchPayments", ctx, request)
	ret0, _ := ret[0].(*model.Response[[]*model.PaymentResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchPayments indicates an expected call of SearchPayments.
func (mr *MockPaymentServiceMockRecorder) SearchPayments(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchPayments", reflect.TypeOf((*MockPaymentService)(nil).SearchPayments), ctx, request)
}
