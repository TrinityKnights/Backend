// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/service/event/event_service.go
//
// Generated by this command:
//
//	mockgen -source=./internal/service/event/event_service.go -destination=test/mock/service/event/event_service_mock.go
//

// Package mock_event is a generated GoMock package.
package mock_event

import (
	context "context"
	reflect "reflect"

	model "github.com/TrinityKnights/Backend/internal/domain/model"
	gomock "go.uber.org/mock/gomock"
)

// MockEventService is a mock of EventService interface.
type MockEventService struct {
	ctrl     *gomock.Controller
	recorder *MockEventServiceMockRecorder
	isgomock struct{}
}

// MockEventServiceMockRecorder is the mock recorder for MockEventService.
type MockEventServiceMockRecorder struct {
	mock *MockEventService
}

// NewMockEventService creates a new mock instance.
func NewMockEventService(ctrl *gomock.Controller) *MockEventService {
	mock := &MockEventService{ctrl: ctrl}
	mock.recorder = &MockEventServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventService) EXPECT() *MockEventServiceMockRecorder {
	return m.recorder
}

// CreateEvent mocks base method.
func (m *MockEventService) CreateEvent(ctx context.Context, request *model.CreateEventRequest) (*model.EventResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvent", ctx, request)
	ret0, _ := ret[0].(*model.EventResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEvent indicates an expected call of CreateEvent.
func (mr *MockEventServiceMockRecorder) CreateEvent(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvent", reflect.TypeOf((*MockEventService)(nil).CreateEvent), ctx, request)
}

// GetEventByID mocks base method.
func (m *MockEventService) GetEventByID(ctx context.Context, request *model.GetEventRequest) (*model.EventResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventByID", ctx, request)
	ret0, _ := ret[0].(*model.EventResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventByID indicates an expected call of GetEventByID.
func (mr *MockEventServiceMockRecorder) GetEventByID(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventByID", reflect.TypeOf((*MockEventService)(nil).GetEventByID), ctx, request)
}

// GetEvents mocks base method.
func (m *MockEventService) GetEvents(ctx context.Context, request *model.EventsRequest) (*model.Response[[]*model.EventResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvents", ctx, request)
	ret0, _ := ret[0].(*model.Response[[]*model.EventResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvents indicates an expected call of GetEvents.
func (mr *MockEventServiceMockRecorder) GetEvents(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvents", reflect.TypeOf((*MockEventService)(nil).GetEvents), ctx, request)
}

// SearchEvents mocks base method.
func (m *MockEventService) SearchEvents(ctx context.Context, request *model.EventSearchRequest) (*model.Response[[]*model.EventResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchEvents", ctx, request)
	ret0, _ := ret[0].(*model.Response[[]*model.EventResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchEvents indicates an expected call of SearchEvents.
func (mr *MockEventServiceMockRecorder) SearchEvents(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchEvents", reflect.TypeOf((*MockEventService)(nil).SearchEvents), ctx, request)
}

// UpdateEvent mocks base method.
func (m *MockEventService) UpdateEvent(ctx context.Context, request *model.UpdateEventRequest) (*model.EventResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEvent", ctx, request)
	ret0, _ := ret[0].(*model.EventResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEvent indicates an expected call of UpdateEvent.
func (mr *MockEventServiceMockRecorder) UpdateEvent(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEvent", reflect.TypeOf((*MockEventService)(nil).UpdateEvent), ctx, request)
}
