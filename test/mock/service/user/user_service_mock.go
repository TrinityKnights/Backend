// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/service/user/user_service.go
//
// Generated by this command:
//
//	mockgen -source=./internal/service/user/user_service.go -destination=test/mock/service/user/user_service_mock.go
//

// Package mock_user is a generated GoMock package.
package mock_user

import (
	context "context"
	reflect "reflect"

	model "github.com/TrinityKnights/Backend/internal/domain/model"
	gomock "go.uber.org/mock/gomock"
)

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
	isgomock struct{}
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockUserService) Login(ctx context.Context, request *model.LoginRequest) (*model.TokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, request)
	ret0, _ := ret[0].(*model.TokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockUserServiceMockRecorder) Login(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserService)(nil).Login), ctx, request)
}

// Profile mocks base method.
func (m *MockUserService) Profile(ctx context.Context) (*model.UserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Profile", ctx)
	ret0, _ := ret[0].(*model.UserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Profile indicates an expected call of Profile.
func (mr *MockUserServiceMockRecorder) Profile(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Profile", reflect.TypeOf((*MockUserService)(nil).Profile), ctx)
}

// RefreshToken mocks base method.
func (m *MockUserService) RefreshToken(ctx context.Context, request *model.RefreshTokenRequest) (*model.TokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshToken", ctx, request)
	ret0, _ := ret[0].(*model.TokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshToken indicates an expected call of RefreshToken.
func (mr *MockUserServiceMockRecorder) RefreshToken(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshToken", reflect.TypeOf((*MockUserService)(nil).RefreshToken), ctx, request)
}

// Register mocks base method.
func (m *MockUserService) Register(ctx context.Context, request *model.RegisterRequest) (*model.UserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, request)
	ret0, _ := ret[0].(*model.UserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockUserServiceMockRecorder) Register(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockUserService)(nil).Register), ctx, request)
}

// RequestReset mocks base method.
func (m *MockUserService) RequestReset(ctx context.Context, request *model.ReqResetPasswordRequest) (*model.VerifyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestReset", ctx, request)
	ret0, _ := ret[0].(*model.VerifyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestReset indicates an expected call of RequestReset.
func (mr *MockUserServiceMockRecorder) RequestReset(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestReset", reflect.TypeOf((*MockUserService)(nil).RequestReset), ctx, request)
}

// ResetPassword mocks base method.
func (m *MockUserService) ResetPassword(ctx context.Context, request *model.ResetPasswordRequest) (*model.VerifyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetPassword", ctx, request)
	ret0, _ := ret[0].(*model.VerifyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetPassword indicates an expected call of ResetPassword.
func (mr *MockUserServiceMockRecorder) ResetPassword(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetPassword", reflect.TypeOf((*MockUserService)(nil).ResetPassword), ctx, request)
}

// Update mocks base method.
func (m *MockUserService) Update(ctx context.Context, request *model.UpdateUserRequest) (*model.UserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, request)
	ret0, _ := ret[0].(*model.UserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockUserServiceMockRecorder) Update(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserService)(nil).Update), ctx, request)
}

// VerifyEmail mocks base method.
func (m *MockUserService) VerifyEmail(ctx context.Context, request *model.VerifyRequest) (*model.VerifyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyEmail", ctx, request)
	ret0, _ := ret[0].(*model.VerifyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyEmail indicates an expected call of VerifyEmail.
func (mr *MockUserServiceMockRecorder) VerifyEmail(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyEmail", reflect.TypeOf((*MockUserService)(nil).VerifyEmail), ctx, request)
}
