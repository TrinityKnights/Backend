// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/service/venue/venue_service.go
//
// Generated by this command:
//
//	mockgen -source=./internal/service/venue/venue_service.go -destination=test/mock/service/venue/venue_service_mock.go
//

// Package mock_venue is a generated GoMock package.
package mock_venue

import (
	context "context"
	reflect "reflect"

	model "github.com/TrinityKnights/Backend/internal/domain/model"
	gomock "go.uber.org/mock/gomock"
)

// MockVenueService is a mock of VenueService interface.
type MockVenueService struct {
	ctrl     *gomock.Controller
	recorder *MockVenueServiceMockRecorder
	isgomock struct{}
}

// MockVenueServiceMockRecorder is the mock recorder for MockVenueService.
type MockVenueServiceMockRecorder struct {
	mock *MockVenueService
}

// NewMockVenueService creates a new mock instance.
func NewMockVenueService(ctrl *gomock.Controller) *MockVenueService {
	mock := &MockVenueService{ctrl: ctrl}
	mock.recorder = &MockVenueServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVenueService) EXPECT() *MockVenueServiceMockRecorder {
	return m.recorder
}

// CreateVenue mocks base method.
func (m *MockVenueService) CreateVenue(ctx context.Context, request *model.CreateVenueRequest) (*model.VenueResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVenue", ctx, request)
	ret0, _ := ret[0].(*model.VenueResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVenue indicates an expected call of CreateVenue.
func (mr *MockVenueServiceMockRecorder) CreateVenue(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVenue", reflect.TypeOf((*MockVenueService)(nil).CreateVenue), ctx, request)
}

// GetVenueByID mocks base method.
func (m *MockVenueService) GetVenueByID(ctx context.Context, request *model.GetVenueRequest) (*model.VenueResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVenueByID", ctx, request)
	ret0, _ := ret[0].(*model.VenueResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVenueByID indicates an expected call of GetVenueByID.
func (mr *MockVenueServiceMockRecorder) GetVenueByID(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVenueByID", reflect.TypeOf((*MockVenueService)(nil).GetVenueByID), ctx, request)
}

// GetVenues mocks base method.
func (m *MockVenueService) GetVenues(ctx context.Context, request *model.VenuesRequest) (*model.Response[[]*model.VenueResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVenues", ctx, request)
	ret0, _ := ret[0].(*model.Response[[]*model.VenueResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVenues indicates an expected call of GetVenues.
func (mr *MockVenueServiceMockRecorder) GetVenues(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVenues", reflect.TypeOf((*MockVenueService)(nil).GetVenues), ctx, request)
}

// SearchVenues mocks base method.
func (m *MockVenueService) SearchVenues(ctx context.Context, request *model.VenueSearchRequest) (*model.Response[[]*model.VenueResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchVenues", ctx, request)
	ret0, _ := ret[0].(*model.Response[[]*model.VenueResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchVenues indicates an expected call of SearchVenues.
func (mr *MockVenueServiceMockRecorder) SearchVenues(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchVenues", reflect.TypeOf((*MockVenueService)(nil).SearchVenues), ctx, request)
}

// UpdateVenue mocks base method.
func (m *MockVenueService) UpdateVenue(ctx context.Context, request *model.UpdateVenueRequest) (*model.VenueResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVenue", ctx, request)
	ret0, _ := ret[0].(*model.VenueResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVenue indicates an expected call of UpdateVenue.
func (mr *MockVenueServiceMockRecorder) UpdateVenue(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVenue", reflect.TypeOf((*MockVenueService)(nil).UpdateVenue), ctx, request)
}
