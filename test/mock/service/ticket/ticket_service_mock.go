// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/service/ticket/ticket_service.go
//
// Generated by this command:
//
//	mockgen -source=./internal/service/ticket/ticket_service.go -destination=test/mock/service/ticket/ticket_service_mock.go
//

// Package mock_ticket is a generated GoMock package.
package mock_ticket

import (
	context "context"
	reflect "reflect"

	model "github.com/TrinityKnights/Backend/internal/domain/model"
	gomock "go.uber.org/mock/gomock"
)

// MockTicketService is a mock of TicketService interface.
type MockTicketService struct {
	ctrl     *gomock.Controller
	recorder *MockTicketServiceMockRecorder
	isgomock struct{}
}

// MockTicketServiceMockRecorder is the mock recorder for MockTicketService.
type MockTicketServiceMockRecorder struct {
	mock *MockTicketService
}

// NewMockTicketService creates a new mock instance.
func NewMockTicketService(ctrl *gomock.Controller) *MockTicketService {
	mock := &MockTicketService{ctrl: ctrl}
	mock.recorder = &MockTicketServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTicketService) EXPECT() *MockTicketServiceMockRecorder {
	return m.recorder
}

// CreateTicket mocks base method.
func (m *MockTicketService) CreateTicket(ctx context.Context, request *model.CreateTicketRequest) ([]*model.TicketResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTicket", ctx, request)
	ret0, _ := ret[0].([]*model.TicketResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTicket indicates an expected call of CreateTicket.
func (mr *MockTicketServiceMockRecorder) CreateTicket(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTicket", reflect.TypeOf((*MockTicketService)(nil).CreateTicket), ctx, request)
}

// GetTicketByID mocks base method.
func (m *MockTicketService) GetTicketByID(ctx context.Context, request *model.GetTicketRequest) (*model.TicketResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTicketByID", ctx, request)
	ret0, _ := ret[0].(*model.TicketResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTicketByID indicates an expected call of GetTicketByID.
func (mr *MockTicketServiceMockRecorder) GetTicketByID(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTicketByID", reflect.TypeOf((*MockTicketService)(nil).GetTicketByID), ctx, request)
}

// GetTickets mocks base method.
func (m *MockTicketService) GetTickets(ctx context.Context, request *model.TicketsRequest) (*model.Response[[]*model.TicketResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTickets", ctx, request)
	ret0, _ := ret[0].(*model.Response[[]*model.TicketResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTickets indicates an expected call of GetTickets.
func (mr *MockTicketServiceMockRecorder) GetTickets(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTickets", reflect.TypeOf((*MockTicketService)(nil).GetTickets), ctx, request)
}

// SearchTickets mocks base method.
func (m *MockTicketService) SearchTickets(ctx context.Context, request *model.TicketSearchRequest) (*model.Response[[]*model.TicketResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchTickets", ctx, request)
	ret0, _ := ret[0].(*model.Response[[]*model.TicketResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchTickets indicates an expected call of SearchTickets.
func (mr *MockTicketServiceMockRecorder) SearchTickets(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchTickets", reflect.TypeOf((*MockTicketService)(nil).SearchTickets), ctx, request)
}

// UpdateTicket mocks base method.
func (m *MockTicketService) UpdateTicket(ctx context.Context, request *model.UpdateTicketRequest) (*model.TicketResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTicket", ctx, request)
	ret0, _ := ret[0].(*model.TicketResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTicket indicates an expected call of UpdateTicket.
func (mr *MockTicketServiceMockRecorder) UpdateTicket(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTicket", reflect.TypeOf((*MockTicketService)(nil).UpdateTicket), ctx, request)
}
